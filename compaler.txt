compaler

char stack[MAX_SIZE];
int top = -1;

void push(char c) {
    if (top == MAX_SIZE - 1) {
        printf("Stack Overflow\n");
        return;
    }
    stack[++top] = c;
}

void pop() {
    if (top == -1) {
        printf("Stack Underflow\n");
        return;
    }
    top--;
}

char find_top() {
    if (top == -1) {
        return '\0'; // Return null character if stack is empty
    }
    return stack[top];
}

int isMatchingPair(char character1, char character2) {
    if (character1 == '(' && character2 == ')') {
        return 1;
    } else if (character1 == '{' && character2 == '}') {
        return 1;
    } else if (character1 == '[' && character2 == ']') {
        return 1;
    } else {
        return 0;
    }
}

int isBalanced(char expression[]) {
    int i;
    for (i = 0; i < strlen(expression); i++) {
        if (expression[i] == '(' || expression[i] == '{' || expression[i] == '[') {
            push(expression[i]);
        } else if (expression[i] == ')' || expression[i] == '}' || expression[i] == ']') {
            if (top == -1 || !isMatchingPair(find_top(), expression[i])) {
                return 0;
            } else {
                pop();
            }
        }
    }
    if (top == -1) {
        return 1; // Expression is balanced
    } else {
        return 0; // Expression is not balanced
    }
}
....................................................................................................................
removeDuplicates



struct Node* removeDuplicates(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    struct Node* nextNode = head->next;

    if (head->data == nextNode->data) {
        head->next = nextNode->next;
        free(nextNode);
        return removeDuplicates(head);
    } else {
        head->next = removeDuplicates(head->next);
        return head;
    }
}
.........................................................................................................
find the sum of the leaf node in the binary tree 

int sumOfLeafNodes(struct TreeNode* root) {
    if (root == NULL) {
        return 0;
    }
    // If the node is a leaf node, return its value
    if (root->left == NULL && root->right == NULL) {
        return root->val;
    }
    // Recursively calculate the sum of leaf nodes in the left and right subtrees
    return sumOfLeafNodes(root->left) + sumOfLeafNodes(root->right);
}
........................................................................................................
void inorder(struct Node *root, int *sum, int *count, int k) {
    if (root == NULL || *count >= k)
        return;

    inorder(root->left, sum, count, k);

    *sum += root->key;
    (*count)++;

    inorder(root->right, sum, count, k);
}
...................................................................................................................... 